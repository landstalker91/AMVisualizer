
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <title>Network | Interaction events</title>

    <script type="text/javascript" src="~/vis-4.21.0/vis-4.21.0/dist/vis.js"></script>
    <link href="~/vis-4.21.0/vis-4.21.0/dist/vis-network.min.css" rel="stylesheet" type="text/css">

    <style type="text/css">
        #mynetwork {
            width: 600px;
            height: 400px;
            border: 1px solid lightgray;
        }
    </style>
</head>
<body>

    <p>
        Create a simple network with some nodes and edges. Some of the events are logged in the console in improve readability.
    </p>
    <table border="1" id="t">
        <tr>
            <th>id</th>
            <th>title</th>
        </tr>
        <tr><td id="thiselem"></td><td></td></tr>
        <tr><td></td><td></td></tr>
    </table>
    <div id="mynetwork">
        <div class="vis-network" tabindex="900" style="position: relative; overflow: hidden; touch-action: pan-y; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 100%;">
            <canvas width="900" height="600" style="position: relative; touch-action: none; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 100%;"></canvas>
            <div class="vis-manipulation" style="display: none;"></div>
            <div class="vis-edit-mode" style="display: block;">
            <div class="vis-button vis-edit vis-edit-mode" style="touch-action: pan-y; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);">
            <div class="vis-label">Edit</div>
            </div>
            </div>
            <div class="vis-close" style="display: none;"></div>
            <div class="vis-tooltip" style="left: 0px; top: 0px; visibility: hidden;">I have a popup!</div>
        </div>
    </div>

<pre id="eventSpan"><h2>Click event:</h2>{
    "pointer": {
        "DOM": {
            "x": 302,
            "y": 152
        },
        "canvas": {
            "x": 17.5436188788035,
            "y": -27.526982406349248
        }
    },
    "event": "[original event]",
    "nodes": [],
    "edges": [
        "243107cf-02f8-4f26-bb3c-3dfacd78fdff"
    ],
    "items": [
        {
            "edgeId": "243107cf-02f8-4f26-bb3c-3dfacd78fdff"
        }
    ]
}</pre>

    <script type="text/javascript">

        var DIR = '/refresh-cl/';
        var EDGE_LENGTH_MAIN = 150;
        var EDGE_LENGTH_SUB = 50;
        var table = document.getElementById("t");


        // create an array with nodes
        var nodes = new vis.DataSet([
            { id: 1, label: 'Node 1', title: 'I have a popup!', image: DIR + 'Network-Pipe-icon.png', shape: 'image' },
            { id: 2, label: 'Node 2', title: 'I have a popup!', image: DIR + 'Network-Pipe-icon.png', shape: 'image' },
            { id: 3, label: 'Node 3', title: 'I have a popup!', image: DIR + 'Network-Pipe-icon.png', shape: 'image' },
            { id: 4, label: 'Node 4', title: 'I have a popup!', image: DIR + 'Network-Pipe-icon.png', shape: 'image' },
            { id: 5, label: 'Node 5', title: 'I have a popup!', image: DIR + 'Network-Pipe-icon.png', shape: 'image' }
        ]);

        // create an array with edges
        var edges = new vis.DataSet([
            { from: 1, to: 3, length: EDGE_LENGTH_MAIN },
            { from: @ViewBag.Data[0], to: @ViewBag.Data[1], length: EDGE_LENGTH_MAIN },
            { from: 2, to: 4, length: EDGE_LENGTH_MAIN },
            { from: 2, to: 5, length: EDGE_LENGTH_MAIN },
            { from: 3, to: 4, length: EDGE_LENGTH_MAIN }
        ]);

        // create a network
        var container = document.getElementById('mynetwork');
        var data = {
            nodes: nodes,
            edges: edges
        };

        var options = {
            layout: {
                hierarchical: {
                    direction: "UD",
                    sortMethod: "directed"
                }
            },
            physics: {
                enabled: false
            },
            interaction: {
                hover: true,
                dragNodes: true
            },
            manipulation: {
                enabled: true
            },
            configure: {
                filter: function (option, path) {
                    if (path.indexOf('hierarchical') !== -1) {
                        return true;
                    }
                    return false;
                },
                showButton: false
            }
        };

        var network = new vis.Network(container, data, options);

        network.on("click", function (params) {
            params.event = "[original event]";
            //alert('test:' + JSON.stringify(params
            //alert('table:' + document.getElementById('t'));

            document.getElementById('eventSpan').innerHTML = '<h2>Click event:</h2>' + JSON.stringify(params, null, 4);

        });
        network.on("doubleClick", function (params) {
            params.event = "[original event]";
            document.getElementById('eventSpan').innerHTML = '<h2>doubleClick event:</h2>' + JSON.stringify(params, null, 4);
        });
        network.on("oncontext", function (params) {
            params.event = "[original event]";
            document.getElementById('eventSpan').innerHTML = '<h2>oncontext (right click) event:</h2>' + JSON.stringify(params, null, 4);
        });
        network.on("dragStart", function (params) {
            // There's no point in displaying this event on screen, it gets immediately overwritten
            params.event = "[original event]";
            console.log('dragStart Event:', params);
            console.log('dragStart event, getNodeAt returns: ' + this.getNodeAt(params.pointer.DOM));
        });
        network.on("dragging", function (params) {
            params.event = "[original event]";
            document.getElementById('eventSpan').innerHTML = '<h2>dragging event:</h2>' + JSON.stringify(params, null, 4);
        });
        network.on("dragEnd", function (params) {
            params.event = "[original event]";
            document.getElementById('eventSpan').innerHTML = '<h2>dragEnd event:</h2>' + JSON.stringify(params, null, 4);
            console.log('dragEnd Event:', params);
            console.log('dragEnd event, getNodeAt returns: ' + this.getNodeAt(params.pointer.DOM));
        });
        network.on("zoom", function (params) {
            var test;
            //debugger;
            console.log('zoom Event:', params);
            document.getElementById('eventSpan').innerHTML = '<h2>zoom event:</h2>' + JSON.stringify(params, null, 4);
        });
        network.on("showPopup", function (params) {
            //alert(params);
            //var myCell = document.getElementById('thiselem');//указываем элемент в который вставляем данные
            //myCell.innerHTML = params.nodes[0];

            var myCell = document.getElementById('thiselem');//указываем элемент в который вставляем данные
            myCell.innerHTML = params;

            document.getElementById('eventSpan').innerHTML = '<h2>showPopup event: </h2>' + JSON.stringify(params, null, 4);
        });
        network.on("hidePopup", function () {
            console.log('hidePopup Event');
        });
        network.on("select", function (params) {
            console.log('select Event:', params);
        });
        network.on("selectNode", function (params) {
            console.log('selectNode Event:', params);
        });
        network.on("selectEdge", function (params) {
            console.log('selectEdge Event:', params);
        });
        network.on("deselectNode", function (params) {
            console.log('deselectNode Event:', params);
        });
        network.on("deselectEdge", function (params) {
            console.log('deselectEdge Event:', params);
        });
        network.on("hoverNode", function (params) {
            console.log('hoverNode Event:', params);
        });
        network.on("hoverEdge", function (params) {
            console.log('hoverEdge Event:', params);
        });
        network.on("blurNode", function (params) {
            console.log('blurNode Event:', params);
        });
        network.on("blurEdge", function (params) {
            console.log('blurEdge Event:', params);
        });


    </script>

</body>
</html>